package mktransit;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class AlgorithmTest {
    public static void main(String[] args) {
        JsonReader reader = new JsonReader();
        reader.loadJsonData();

        Map<String, Station> stationMap = reader.getStationMap();

        PathFinder pathFinder = new PathFinder(stationMap);

        // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏°‡∏≤‡∏à‡∏≤‡∏Å JsonReader
        List<Station> stationList = new ArrayList<>(reader.getStationMap().values());

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö List<Station> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠
        List<Station> fromStations = new ArrayList<>();
        List<Station> toStations = new ArrayList<>();

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á StationUtil
        StationUtil stationUtil = new StationUtil(stationList);

        // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô IDtoName
        // String stationName = stationUtil.IDtoName("BTS_Siam");

        // System.out.println(stationName); // ‡∏à‡∏∞‡πÑ‡∏î‡πâ "‡∏™‡∏¢‡∏≤‡∏°" (‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡πÉ‡∏ô JSON)

        // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô interchange"

        String startId = "BL06";
        String endId = "YL05";

        PathResult result = pathFinder.findShortestPath(startId, endId);
        int i = 0;

        if (result.getFullPath().isEmpty()) {
            System.out.println("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å " + stationUtil.IDtoName(startId) + "(" + startId + ")" + " ‡πÑ‡∏õ‡∏¢‡∏±‡∏á "
                    + stationUtil.IDtoName(endId) + "(" + endId + ")");
        } else {
            System.out.println("‚úÖ ‡πÄ‡∏à‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á!");
            System.out.println("‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:");

            for (String stationId : result.getFullPath()) {
                Station station = stationMap.get(stationId);
                System.out.println("- " + station.getName() + " (" + station.getId() + ")");
                i++;
            }

            List<String> fullPath = result.getFullPath();
            List<String> importantSteps = PathUtil.filterImportantStepsWithActualTransfers(fullPath, stationMap);

            if (importantSteps.isEmpty()) {
                System.out.print("üìç ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏≤‡∏¢‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á | ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô " + i + " ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ ");
                System.out.println(stationUtil.IDtoName(startId) + " (" + startId + ") ‚ûú " + stationUtil.IDtoName(endId)
                        + " (" + endId + ")");
            } else {
                System.out.println("üìç ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏≤‡∏¢ | ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô " + i + " ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ");

                int k = 0;
                boolean firstStep = true;
                for (int j = 0; j < importantSteps.size(); j++) {
                    String step = importantSteps.get(j);
                    String[] parts = step.split("->");
                    String fromId = parts[0];
                    String toId = parts[1];

                    String fromName = stationUtil.IDtoName(fromId);
                    String toName = stationUtil.IDtoName(toId);

                    if (!step.equals(startId) && k == 0) {
                        System.out.print("üîÑ " + stationUtil.IDtoName(startId) + " (" + startId + ") ‚ûú ");
                        fromStations.add(stationMap.get(startId)); // ‚úÖ ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô startId
                        k++;
                    }
                    
                    if (firstStep) {
                        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏≤‡∏¢‡πÅ‡∏£‡∏Å
                        System.out.print(fromName + " (" + fromId + ") ‚ûú " + toName + " (" + toId + ")");
                        if (!fromId.equals(startId)) {
                            fromStations.add(stationMap.get(fromId)); // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥
                        }
                        firstStep = false;
                    } else {
                        // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏∏‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏≤‡∏¢‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                        System.out.print(" ‚ûú " + fromName + " (" + fromId + ") ‚ûú " + toName + " (" + toId + ")");
                        toStations.add(stationMap.get(toId));
                    }
                }

                // ‡∏à‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏™‡∏î‡∏á
                String lastToId = importantSteps.get(importantSteps.size() - 1).split("->")[1];
                if (!lastToId.equals(endId)) {
                    System.out.print(" ‚ûú " + stationUtil.IDtoName(endId) + " (" + endId + ")");
                    toStations.add(stationMap.get(endId));
                }

                System.out.println(); // ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
            }

            System.out.println("\nüïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: " + result.getTotalTime() + " ‡∏ô‡∏≤‡∏ó‡∏µ");
        }
        newTrainFareReader fareReader = new newTrainFareReader("TrainPrice.xlsx", stationUtil);
        try {
            int totalFare = fareReader.calculateTotalFare(fromStations, toStations);
            System.out.println("üí∞ ‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏£‡∏ß‡∏°: " + totalFare + " ‡∏ö‡∏≤‡∏ó");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
